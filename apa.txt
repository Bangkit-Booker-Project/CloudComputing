# def encodePW(pw):
#     salt = os.urandom(12)
#     key = hashlib.pbkdf2_hmac('sha256', pw.encode('utf-8'), salt, 100000)
#     encPW = salt+key
#     return encPW

# def verifPw(dbPW,inputPW):
#     salt = dbPW[:12]
#     key = dbPW[12:]
#     encodedPW = hashlib.pbkdf2_hmac('sha256',inputPW.encode('utf-8'),salt, 100000)
#     if key == encodedPW:
#         return True
#     else:
#         return False


# untuk konek ke cloud mysql
# conn = pymysql.connect(
#     host='omfofineofne.sdaeojeaf.com',
#     database='bookpred',
#     user='wdioioawmd',
#     password='cscnsneo',
#     charset='utfmb8',
#     cursorclass=pymysql.cursors.DictCursos
# )
# conn = db_connection()
# cursor = conn.cursor()




        # r=str(r)
        # x = re.findall('[0-9]+', r)
        # x[0] = int(x[0])




# def getUserData(uid):
#     conn = db_connection()
#     cursor = conn.cursor()
#     sql_Querry= "SELECT * FROM users WHERE id=%s"
#     try :
#         cursor.execute(sql_Querry,(uid,))
#         userD = cursor.fetchall()
#         return userD
#     except:
        
#         return False

# def setGenre(uid,genre):
#     conn = db_connection()
#     cursor = conn.cursor()
#     # konek =dbKonek()
#     # kursor = konek.cursor()
#     sql_Querry = "UPDATE users SET genres=%s WHERE id=%s"
#     user = False
#     try :
#         userD = getUserData(uid)
#         if userD[] == None:
#             uGenre = userD['genres']
#         inGenre=[]
#         inGenre.append(uGenre)
#         inGenre.append(genre)
#         cursor.execute(sql_Querry,(inGenre,uid))
#         conn.commit()
#         # rows = konek.fetchall()
#         # for r in rows:
#         #     user = r
#         return True
#     except:
#         return False
#====================================================================================================================#



# sql_querry = """CREATE TABLE books (
#     bookTitle text NOT NULL, 
#     bookRating float NOT NULL,
#     ISBN varchar(20) PRIMARY KEY,
#     bookAuthor text NOT NULL,
#     yearOfPublication text NOT NULL,
#     Publisher text NOT NULL,
#     url text NOT NULL,
#     bookImage text NOT NULL,
#     bookDesc text NOT NULL,
#     ratingCount integer,
#     bookPages text NOT NULL,
#     bookGenres text NOT NULL,
#     bookGenre1 text NOT NULL,
#     bookGenre2 text NOT NULL,
#     bookGenre3 text NOT NULL
# )"""

runtime: python
threadsafe: yes
env: flex

resources:
  cpu: 1
  memory_gb: 2
  disk_size_gb: 20

runtime_config:
    python_version: 3


# entrypoint: gunicorn -b :$PORT main:app
tensorflow==2.6.2

# conn.close()



# bookTitle
# bookRating
# ISBN
# bookAuthor
# yearOfPublication
# Publisher
# url
# bookImage
# bookDesc
# ratingCount
# bookPages
# bookGenres

# konek = sqlite3.connect('books.sqlite')


# def dbKonek():
#     con = None
#     try:
#         con = sqlite3.connect('books.sqlite')
#     except sqlite3.error as e:
#         print(e)
#     return con





# sql_querry = ''
# cursor.execute(sql_querry)
# CREATE TABLE users (
#     id        INTEGER    PRIMARY KEY AUTO_INCREMENT
#                          UNIQUE
#                          NOT NULL,
#     email     CHAR (255) NOT NULL
#                          UNIQUE,
#     password  CHAR (255) NOT NULL,
#     username  CHAR (255) NOT NULL,
#     genres TEXT
# );


# INSERT INTO users (email,password,username) VALUES ('admin','admin','admin')
# UPDATE users SET ratedBook ='[classics]' WHERE id=1
# SELECT * FROM users WHERE email='admin'



# https://nitratine.net/blog/post/how-to-hash-passwords-in-python/





# rekomendasi 50 buku untuk user

# book_data = pd.read_csv('book_dataset.csv')

# # Mengubah book_ids menjadi list tanpa nilai yang sama
# books_ids = book_data['ISBN'].unique().tolist()
 
# # Melakukan proses encoding book_ids
# book_to_book_encoded = {x: i for i, x in enumerate(books_ids)}
 
# # Melakukan proses encoding angka ke book_ids
# book_encoded_to_book = {i: x for i, x in enumerate(books_ids)}
    
    




    # CREATE TABLE ratingDataset (
    # userID     INTEGER       NOT NULL,
    # bookID     VARCHAR (20)  NOT NULL,
    # bookRating DOUBLE        NOT NULL);
    # bookTitle  VARCHAR (255) NOT NULL);